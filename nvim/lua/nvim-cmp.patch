From ca812e4c0d677f4cebd94bbe7a875412dc8e90d2 Mon Sep 17 00:00:00 2001
From: yioneko <yioneko@outlook.com>
Date: Sun, 18 Dec 2022 12:41:09 +0800
Subject: [PATCH] feat: async interrupt get_entries by time

---
 lua/cmp/context.lua     |  6 ++++++
 lua/cmp/core.lua        |  9 +++++----
 lua/cmp/source.lua      | 22 ++++++++++++++--------
 lua/cmp/utils/async.lua | 39 +++++++++++++++++++++++++++++++++++++++
 lua/cmp/view.lua        | 24 ++++++++++++------------
 5 files changed, 76 insertions(+), 24 deletions(-)

diff --git a/lua/cmp/context.lua b/lua/cmp/context.lua
index 0c25462cd..ef9ba18d6 100644
--- a/lua/cmp/context.lua
+++ b/lua/cmp/context.lua
@@ -16,6 +16,7 @@ local api = require('cmp.utils.api')
 ---@field public cursor_line string
 ---@field public cursor_after_line string
 ---@field public cursor_before_line string
+---@field public cancelled boolean
 local context = {}
 
 ---Create new empty context
@@ -55,9 +56,14 @@ context.new = function(prev_context, option)
   self.cursor.character = misc.to_utfindex(self.cursor_line, self.cursor.col)
   self.cursor_before_line = string.sub(self.cursor_line, 1, self.cursor.col - 1)
   self.cursor_after_line = string.sub(self.cursor_line, self.cursor.col)
+  self.cancelled = false
   return self
 end
 
+context.cancel = function(self)
+  self.cancelled = true
+end
+
 ---Return context creation reason.
 ---@return cmp.ContextReason
 context.get_reason = function(self)
diff --git a/lua/cmp/core.lua b/lua/cmp/core.lua
index efc85ba18..62a3c1fbc 100644
--- a/lua/cmp/core.lua
+++ b/lua/cmp/core.lua
@@ -56,6 +56,7 @@ end
 ---@param option? cmp.ContextOption
 ---@return cmp.Context
 core.get_context = function(self, option)
+  self.context:cancel()
   local prev = self.context:clone()
   prev.prev_context = nil
   prev.cache = nil
@@ -296,7 +297,7 @@ core.complete = function(self, ctx)
 end
 
 ---Update completion menu
-core.filter = async.throttle(function(self)
+core.filter = async.throttle(async.wrap(function(self)
   self.filter.timeout = config.get().performance.throttle
 
   -- Check invalid condition.
@@ -329,14 +330,14 @@ core.filter = async.throttle(function(self)
   if #self:get_sources(function(s)
     if s.status == source.SourceStatus.FETCHING then
       return true
-    elseif #s:get_entries(ctx) > 0 then
-      return true
+      -- elseif #s:get_entries(ctx) > 0 then
+      --   return true
     end
     return false
   end) == 0 then
     config.set_onetime({})
   end
-end, config.get().performance.throttle)
+end), config.get().performance.throttle)
 
 ---Confirm completion.
 ---@param e cmp.Entry
diff --git a/lua/cmp/source.lua b/lua/cmp/source.lua
index 25c3cb37f..8cba8b53e 100644
--- a/lua/cmp/source.lua
+++ b/lua/cmp/source.lua
@@ -105,7 +105,17 @@ source.get_entries = function(self, ctx)
   local inputs = {}
   local entries = {}
   local matching_config = self:get_matching_config()
+  local start = vim.loop.hrtime()
   for _, e in ipairs(target_entries) do
+    if vim.loop.hrtime() - start >= 10000000 then
+      async.yield_schedule()
+      start = vim.loop.hrtime()
+    end
+
+    if ctx.cancelled then
+      break
+    end
+
     local o = e:get_offset()
     if not inputs[o] then
       inputs[o] = string.sub(ctx.cursor_before_line, o)
@@ -123,7 +133,10 @@ source.get_entries = function(self, ctx)
       end
     end
   end
-  self.cache:set({ 'get_entries', tostring(self.revision), ctx.cursor_before_line }, entries)
+
+  if not ctx.cancelled then
+    self.cache:set({ 'get_entries', tostring(self.revision), ctx.cursor_before_line }, entries)
+  end
 
   local max_item_count = self:get_source_config().max_item_count or 200
   local limited_entries = {}
@@ -336,8 +349,6 @@ source.complete = function(self, ctx, callback)
 
       if #(response.items or response) > 0 then
         debug.log(self:get_debug_name(), 'retrieve', #(response.items or response))
-        local old_offset = self.offset
-        local old_entries = self.entries
 
         self.status = source.SourceStatus.COMPLETED
         self.entries = {}
@@ -349,11 +360,6 @@ source.complete = function(self, ctx, callback)
           end
         end
         self.revision = self.revision + 1
-        if #self:get_entries(ctx) == 0 then
-          self.offset = old_offset
-          self.entries = old_entries
-          self.revision = self.revision + 1
-        end
       else
         -- The completion will be invoked when pressing <CR> if the trigger characters contain the <Space>.
         -- If the server returns an empty response in such a case, should invoke the keyword completion on the next keypress.
diff --git a/lua/cmp/utils/async.lua b/lua/cmp/utils/async.lua
index 8822112e6..df8cd90a4 100644
--- a/lua/cmp/utils/async.lua
+++ b/lua/cmp/utils/async.lua
@@ -31,6 +31,9 @@ async.throttle = function(fn, timeout)
     running = false,
     timeout = timeout,
     sync = function(self, timeout_)
+      if not self.running then
+        return
+      end
       vim.wait(timeout_ or 1000, function()
         return not self.running
       end)
@@ -138,4 +141,40 @@ async.debounce_next_tick = function(callback)
   end
 end
 
+async.yield = function(func, ...)
+  local args = { ... }
+  return coroutine.yield(function(callback)
+    table.insert(args, callback)
+    func(unpack(args))
+  end)
+end
+
+async.yield_schedule = function()
+  return coroutine.yield(function(callback)
+    vim.schedule(callback)
+  end)
+end
+
+async.wrap = function(task)
+  local step
+  return function(...)
+    local args = { ... }
+    local thread = coroutine.create(function()
+      return task(unpack(args))
+    end)
+    step = function(...)
+      if coroutine.status(thread) == 'dead' then
+        return
+      end
+      local ok, ret = coroutine.resume(thread, ...)
+      if not ok then
+        error(ret)
+      elseif coroutine.status(thread) ~= 'dead' then
+        ret(step)
+      end
+    end
+    step()
+  end
+end
+
 return async
diff --git a/lua/cmp/view.lua b/lua/cmp/view.lua
index 42f5664eb..766337a89 100644
--- a/lua/cmp/view.lua
+++ b/lua/cmp/view.lua
@@ -94,19 +94,19 @@ view.open = function(self, ctx, sources)
       end
     end
 
-    -- sort.
-    local comparetors = config.get().sorting.comparators
-    table.sort(entries, function(e1, e2)
-      for _, fn in ipairs(comparetors) do
-        local diff = fn(e1, e2)
-        if diff ~= nil then
-          return diff
+    -- open
+    if not ctx.cancelled and #entries > 0 then
+      -- sort.
+      local comparetors = config.get().sorting.comparators
+      table.sort(entries, function(e1, e2)
+        for _, fn in ipairs(comparetors) do
+          local diff = fn(e1, e2)
+          if diff ~= nil then
+            return diff
+          end
         end
-      end
-    end)
+      end)
 
-    -- open
-    if #entries > 0 then
       self:_get_entries_view():open(offset, entries)
       self.event:emit('menu_opened', {
         window = self:_get_entries_view(),
@@ -116,7 +116,7 @@ view.open = function(self, ctx, sources)
   end
 
   -- complete_done.
-  if #entries == 0 then
+  if not ctx.cancelled and #entries == 0 then
     self:close()
   end
 end
